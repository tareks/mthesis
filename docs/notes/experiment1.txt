Experiment 1
============

Description
-----------
This is a simple setup to simulate a DTN with the following nodes:
Node A: Node requesting data. (Receiver)
Node C: Node storing data and responding to data requests. (Sender)

A <--------> C
      ^    
    Link 1 

Assumptions:
- Each node runs on a separate ccnd instance.
- It is the responsiblity of the requester to ensure data is received.
- Not using CCN*Streams. 
- Some scenarios require large files sizes that allow for interruptions during transmission/receipt. 
- UDP is used for underlying packet transmission.

Parameters:
- Number of nodes: 2
- Number of relay nodes: 0
- Number of links: 1
- Number of trials per scenario: 5
- Number of Interest requests sent per trial: 3
- Interest timeout period: 4 seconds
- Interval between Interest retries: 5 seconds
- Sender/Receiver data buffer size: unspecified (no segmentation, 1-to-1 interest/data mapping)
- File size: 512 bytes unless otherwise specified.

The experiment will test the following scenarios:
a) There are no connectivity or latency problems between the 2 nodes.
- Timeline:
Link1 up at: 0s for 30 seconds.

- Purpose: 
Test relaying and caching.

- Expected results:
No transmission problems. First Interest is satisified.

b) Link 1 is down before the request from A is sent.  
- Timeline:
Link1 down at: 0s
Link1 up at:  4s for 30 seconds.

- Purpose:
Test Interest packet retransmission by A.

- Expected results:
First Interest packet in each trial is lost. The second Interest is satisfied. 

c) Link 1 is down before data is received by A (after Interest is received by C).
- Timeline:
Link1 up at: 0s
Link1 down at: 0.01s (immediately after packet is sent - how accurate can this be?)
Link1 up at: 1s

- Purpose:
Test Interest retransmission by A. 
First Interest packet in each trial is not satisfied. 

- Expected results:

d) Link 1 is broken while data is being received by A.
- Timeline:
Link1 up at: 0s
Link1 up down at: 1s (Have to use a 10MB file size for this?)
Link1 up at: 5s

- Purpose:
Verify data is received correctly after an Interest retransmission.

- Expected results:
First Interest should be reset to get the data if the transfer fails. Second Interest is lost because link is down. Third interest should be satisifed.

Steps
-----
1. Generate random data and sha1sum for it:
$ dd if=/dev/random of=testfile.512 bs=512 count=1

2. Start first CCND instance on node-1
$ CCN_LOCAL_PORT=6001 CCND_DEBUG=2 ./ccndstart

3. Start second CCND instance on node-2
$ CCN_LOCAL_PORT=6001 CCND_DEBUG=2 ./ccndstart

Configure node-2 to route through node-1 using UDP
$ CCN_LOCAL_PORT=6001 ./ccndc add ccnx:/test UDP node-1 6001

4. Run application in Sender mode: (Listen for requests)
$ java -cp $CLASSPATH:thoth.jar -Dccn.agent.port=6001 thoth.DTNode -S ccnx:/test/test1 testfile.512

5. Run application in Receiver mode: (Send data requests)
$ java -cp $CLASSPATH:thoth.jar -Dccn.agent.port=6001 thoth.DTNode -R ccnx:/test/1 rcvdfile.512

6. Monitor output:


Results and Observations:
------------------------
- How many times was the requested data received?
- How many times was the data received correctly?
- How long did it take to receive the data (from the time Interest was sent)?
note: assume no data segmentation (future work?) - this allow to match Interest to Data received without worrying about segment complexity at the moment.
- What is the success rate per Interest? ( # times data received correctly / # of Interests sent) based on fixed number of interests sent per scenario
note: can plot success rate over number of trials?

Other notes:
- vary timeout periods across trials or run a separate set with different times?
==================
ccnd logs with high debugs from 7-63

