Experiment 2
============

Description
-----------
This is a setup to simulate a DTN with:
Node 1: storing data and responding to data requests. (Sender)
Node 2: Node relaying/caching data. (Relay)
Node 3: Node requesting data. (Receiver)

1 <----> 2 <-----> 3
     ^        ^
   Link 1    Link 2

Assumptions:
- Each node runs on a separate ccnd instance.
- It is the responsiblity of the requester to ensure data is received.
- Assume different data files sizes that allow for interruptions during transmission/receipt.

Parameters:
- Number of nodes: 3
- Number of relay nodes: 1
- Number of links: 2
- Number of Interest requests sent per trial: 3
- Interest timeout period: 4 seconds
- Interval between Interest retries: 5 seconds
- Sender/Receiver data buffer size: unspecified (no segmentation, 1-to-1 interest/data mapping)
- File size: 512 bytes

The experiment will test the following scenarios:
a) There are no connectivity or latency problems between all 3 nodes.
- Timeline:
Link1 up at: 0s
Link2 up at: 0s

- Purpose:
Test relaying and caching.

- Expected results:
No transmission problems. The first Interest request is immediately satistified.

b) Link 1 is down before the request from node-3 is received by node-1, but Interest reaches node-2.
- Timeline:
Link1 up from : 4s
Link2 up from : 0s

- Purpose:
Test Interest retransmission through node-2.

- Expected results:
First Interest packet in each trial is lost even though it reaches the relay node. The next packet is satisfied. Even though node-2 adds the Interest to its PIT, it makes no attempts to resend it to node-1 until a new Interest is received from the requesting application on node-3. The PIT entry on node-2 will expire and a new Interest from node-3 is required before data is sent back.


c) The Interest request from node-3 reaches node-1 successfully, but the data response does not reach node-1 on the first attempt because link 2 is down (ie. link 2 is only up until the Interest is propagated to node-1). 

- Timeline:
Link1 up from: 0ms
Link2 up from: 0ms
Link2 down from: 1500ms
Link2 up from : 2000ms

- Purpose:
Test Interest retransmission and Content Object caching.

- Expected results:
The initial request from node-3 reaches node-1 through the relay node (node-2). Both node-2 and node-1 add the Interest request to their PIT. node-1 will send the Content Object back on the network. The data is stored in node-2's Content Store but will does reach node-3 as Link2 is down. When Link2 is restored, the application on node-3 will send another Interest which is immediately satisified by node-2 as it is cached in its Content Store. The second Interest is not relayed to node-1. 


Steps
-----
1. Generate random data and sha1sum for it:
$ dd if=/dev/random of=testfile.512 bs=512 count=1

2. Start first CCND instance (node-1)
$ CCN_LOCAL_PORT=6001 CCND_DEBUG=2 ./ccndstart

3. Start second CCND instance (node-2)
$ CCN_LOCAL_PORT=6002 CCND_DEBUG=2 ./ccndstart

$ CCN_LOCAL_PORT=6001 ./ccndc add ccnx:/test tcp localhost 6002

4. Start third CCND instance (node-3)
$ CCN_LOCAL_PORT=6003 CCND_DEBUG=2 ./ccndstart

$ CCN_LOCAL_PORT=6002 ./ccndc add ccnx:/test tcp localhost 6003

5. Run application in Sender mode: (Listen for requests)
$ java -cp $CLASSPATH:thoth.jar -Dccn.agent.port=6003 thoth.DTSender ccnx:/test/test1 testfile.512

6. Run application in Receiver mode: (Send data requests)
$ java -cp $CLASSPATH:thoth.jar -Dccn.agent.port=6001 thoth.DTReceiver ccnx:/test/1 rcvdfile.512

7. Monitor output:


Results and Observations:
------------------------
- How many times was the requested data received?
- How many times was the data received correctly?
- How long did it take to receive the data (from the time Interest was sent)?
note: assume no data segmentation (future work?) - this allow to match Interest to Data received without worrying about segment complexity at the moment.
- What is the success rate per Interest? ( # times data received correctly / # of Interests sent) based on fixed number of interests sent per scenario
note: can plot success rate over number of trials?


