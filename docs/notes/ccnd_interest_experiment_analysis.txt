A number of simple experiments using CCNx nodes were conducted in order to identify how the protocol works in an opportunistic setting particularly with regards to Interest retransmission. The experiments consist of a 2 main nodes: a receiver node, that requests a certain CCNX URI (ccnx:/test/1); and a sender node, that stores data corresponding to that URI and responds to Interest requests. Additional nodes are optionally added to act relays between the 2 main nodes. The scenarios presented below identify CCNX Interest retransmission behavior using different conditions related to link availability and interruption.

Notes on data collection:
------------------------
- The intervals measured includes all ccnx protocol mechanisms (including key retrieval and content object verification) beyond the initial registration of the application with its ccnd instance. The time involved in security mechanisms is inherently absolved from the comparison by being included in all measurements.

- In certain situations, responses are delayed either due to network latency, hard drive response time, application response time, or other factors. In addition, because the ccnd Interest lifetime timer is checked every 250ms, there maybe be multiples of 250ms gaps in the response time. This explains why in certain scenarios the response time could be much higher than in others testing the same case. While those can be ignored as outliers, they should have no real impact on the total time of Interest success, especially when an Interest must be retransmitted.

Experiment (1):
--------------
This experiment involves 4 scenarios to test Interest retransmission between the sender and receiver nodes. It includes:
a) No interruptions of disconnections.
b) Link is down from start of scenario. (Interest not sent)
c) Link is down shortly after start of scenario. (Interest sent, data lost)
d) Link is down while receiving data. (Interest sent, data interrupted)

Experiment (1a) Summary:
-----------------------
This scenario involves no link interruptions or disconnections. The receiver requests information from the sender and this data is immediately satisfied.

Experiment parameters:
---------------------
- Number of nodes: 2
- Number of relay nodes: 0
- Number of links: 1
- Interest timeout period: 2 seconds
- Interval between Interest retries: 5 seconds
- File size: 512 bytes

Observations:
------------

Based on a number of 10 runs, the experiments yields the expected end result of the data being received based on the first Interest request. The following information shows response times for the requested data being successfully received:
      Minimum=522, Maximum=609, Average=538.1 (milliseconds)

Analysis:
--------
	The receiving node requests the CCN URI (ccnx:/test/1) at the application level which runs on top of the CCN daemon instance running on the same node. The application sends an Interest packet specifying the URI using the network face that is connected to the daemon. The Interest packet has a number of parameters, most notably its lifetime, which was set to 4 seconds for this experiment[1]*. The Interest packet triggers an "interest_from" event on the the local CCN daemon which results in that Interest being added to the local Pending Interest Table (PIT) as there is no existing entry. A lookup is then perfomed on the Forwarding Information Base (FIB) which returns a match for the prefix (ccnx:/test) on a face, UDP in this experiment, that connects to the other node. The CCN daemon triggers an "interest_to" event which relays the request over that network face to the sender node. Once the Interest is sent, the CCN daemon will monitor that prefix for the lifetime of the Intere
 st.

	On the other node, the sender, the CCN daemon receives the Interest packet on its network face. An "interest_from" event on the daemon which queries its PIT for a match, which results in no matches. The FIB is then checked for the same prefix and a match is found. The daemon then formwards the Interest to the application face. Signature verification is performed to verify the Content Object. When verification is complete, a "consume" event is issued by the daemon followed by a "content_from" event to alert the application that it should send the data across the network.

	At this point, the file is cached as a Content Object in the Content Store of the sender node. A "consume" event followed by a "content_to" event results in the Content Object being sent the data over the network. The data packet is received on the receiver node and processed through a "content_from" event on the daemon. A lookup is performed on the PIT on the prefix. A match is found in the PIT for that Content Object and consequently a "consume" event sends it to the application face interested in the prefix. Finally, a "content_to" event signals that the application reads the data from the local CCN daemon Content Store into memory and writing it to disk to conclude the transfer.

Experiment (1b) Summary:
-----------------------
This scenario tests Interest packet retransmission by the receiving node. This is done by simulating a loss of connectivity for a duration of 4 seconds when the experiment is first started. This loss results in the first Interest packet being sent from the receiving node to be lost. The node will then timeout and resend another Interest packet which is immediately fulfilled.

Experiment parameters:
---------------------
Same parameters as experiment 1a.

Observations:
------------
Based on a number of 10 runs, the experiments yields the expected end result of the data being received based on the second Interest request. The following information shows response times for the requested data being successfully received:
      Minimum=7020, Maximum=7055, Average=7026.3 (milliseconds)

These times are noticeably longer than the ones from experiment 1b and indicate the timeout period for the first Interest, the retry interval, and the successful Interest response time.

In addition, the following times identify the response time for the (second) successful Interest request:
   Minimum=19, Maximum=54, Average=25.2 (milliseconds)
These times are much lower than the time recorded in experiment 1a for an immediate (first) successful Interest.

Analysis:
--------

The receiving node starts in the same manner it did for experiment 1a. It requests the CCN URI (ccnx:/test/1) at the application level. The prefix is not found in the local Content Store or the PIT, so the Interest is added to the Pending Interest Table (PIT) for the lifetime of the that Interest (4 seconds)*. The FIB is then searched and a match is found for that prefix. The Interest is sent over the network and the daemon awaits a response. Because the connection between the two nodes is down at this point in time, the Interest never reaches the sender node. After 4 seconds, an "interest_expiry" event is triggered signalling the end of the lifetime and corresponding entry is removed from the PIT. 
The application on the receiving node is designed to retry the requests 3 times with a retry interval in between attempts. After it timeouts from the first Interest request, it waits for the user specified retry interval and sends another request. The second time an Interest request is sent, the link between the two nodes is up and the Interest reaches the sender node. 
On the sender node, the CCN daemon receives the Interest and follows the same steps outlined in experiment 1a until the file is correctly received.

Experiment (1c) Summary:
-----------------------
This scenario again tests Interest packet retransmission by the receiving node. In this case, the Interest packet is received by the sender node, but the respose is lost due to connection loss. This loss results in the first Interest packet considered void and after its lifetime expires, a second Interest is sent which is then immediately fulfilled.

Experiment parameters:
---------------------
Same parameters as experiment 1a.

Observations:
------------
Based on a number of 3 runs, the experiments yields the expected end result of the data being received based on the second Interest request. The following information shows response times for the requested data being successfully received:
      Minimum=7005, Maximum=7007, Average=7006.33 (milliseconds)
These times are very close to the ones observed in experiment 1b due to the Interest lifetime expiry, retry delay, and second Interest request.  

In addition, the following times identify the response time for the (second) successful Interest request:
   Minimum=4, Maximum=6, Average=5.33333 (milliseconds) 
These times are much faster than the ones recorded in 1a and 1b.

Analysis:
--------
In this scenario, the receiving node behaves the same way as it did in experiments 1a and 1b. A request is made for the CCN URI by the application which triggers an Interest request that is sent over the Network. In this case, the link between the two nodes is up when the Interest is received by the sender node, however, the link drops before a response in the form of a Content Object is sent back. 
The sender node follows the normal procedure by searching for the requested prefix in its Content Store, loading the Content Object from the local application, then sending it back over the network. However, because the connection is lost by the time those Content Object is sent back, the CCN daemon on the receiving node had already expired the Interest from its PIT which results in the Content Object being discarded. The receiving application will then send a new Interest request after its retry interval elapses, which corresponds to when the connection is restored. This allows the second Interest to propagate successfully, and the Content Object to be sent back without interruption or delay. 
It should be noted that in this case, the Content Object by the CCN daemon on the sender node making it unnecessary to propagate the Interest to the application running on that node. The prefix is matched directly to the Content Store and is sent back over the network without intervention from the application reducing the response time.   


Experiment (1d) Summary:
-----------------------
This scenario tests Interest packet retransmission by simulating a link breakage while data is being received. This is conducted using a large file to simplify observing the results. The first Interest packet is prompty satisfied by the sender node, but data transmission fails requiring a second Interest to be sent for the data to be fully received.

Experiment parameters:
---------------------
Same parameters as experiment 1b except for:
- - File size: 40 MB

Observations:
------------
This results from this experiment was rather inconclusive, however they provide some insight into how retransmission works in this case. The main problem with this scenario stems from the application failing to recover when the network connection is lost while it is writing the large Content Object (file) to the network. This operation never recovers and the file is therefore never completely sent back to the receiving node resulting in a failure to receive the data despite multiple requests being subsequently issued.

Analysis:
--------
The scenario follows the same basic steps outlined in previous experiments. The main difference is that even though the first Interest is received by the sender application, the transmission of the Content Object datastream back is interrupted and never completed. As a result, the receiving application will retry the request procedure by sending another Interest which is satisfied directly from the Content Store on the sender node's CCN daemon. 
It appears that due to the large size of the file being transmitted, the data is not completely stored in the Content Store and the application hangs while writing the Content Object to the network. This does not allow the entire file to be transmitted. The CCN daemon on the receiving node appears to detect this incomplete data and ignores the Content Object data being received as it does not fully match the Interest parameters. The lifetime of the Interest elapses and expires without the entirety of the Content Object being received. This process repeats before the receiving application completes its retry attempts and exits.
TODO: Why does the application hang when writing to the network?

Conclusion:
----------
Throughout the simple experiments conducted with a single link connecting 2 nodes, it can be concluded that the CCN daemon does not submit Interest messages other than those expressed by the application driving the requests. When Interests are lost or not satisfied due to transmission errors, it is the responsibility of the application to send another Interest request until valid data is received. It is important to note that although the CCN daemon does not attempt to retransmit Interests itself, it does provide the capability of validating data being received by matching it to the Interest information as well as originating Content Object. 
In a Delay Tolerant environment, it will be the responsbility of the application to make sure that there is a continous stream of Interest requests to recover from a loss of connectivity.
 

				*****************************

Experiment (2):
===============
This experiment involves 3 scenarios to test Interest retransmission between the sender node, a relay node, and a receiver node. It includes:
a) Both links are up.
b) Link is down before Interest reaches relay node.
c) Link is down just after Interest reaches relay node.  

Experiment (2a) Summary:
-----------------------
This scenario involves no link interruptions or disconnections. The receiver requests information from the sender and this data is promptly returned through the relay node.

Experiment parameters:
---------------------
- Number of nodes: 3
- Number of relay nodes: 1
- Number of links: 2
- Interest timeout period: 2 seconds
- Interval between Interest retries: 5 seconds
- File size: 512 bytes

Observations:
------------

Based on a number of 10 runs, the experiments yields the expected end result of the data being received based on the first Interest request. The following information shows response times for the requested data to be successfully received by node-3:
      Minimum=32, Maximum=532, Average=176.3 (milliseconds)

In this case, node-3 sends an Interest which must be propagated to node-1. As an intermediate relay node, node-2 relays the Interest to node-1. Node-1 then sends data back to node-2, which relays it back to node-3.

Analysis:
--------
	The application running on node-3 requests the CCN URI (ccnx:/test/1). The request in the form of an Interest message is sent to the local daemon instance running on the same node. The Interest is then added to the local Pending Interest Table (PIT). A lookup is then perfomed on the Forwarding Information Base (FIB) which returns a match for the prefix (ccnx:/test) on a face, UDP in this experiment, that connects to node-2. When the Interest message reaches node-2, it is added to the PIT. The FIB is then searched for the prefix which returns an entry pointing to node-1. As a result, the Interest message is then forwarded to node-1 where it is also added to the PIT. The prefix matches data which is locally served by the node, which is consequently retrieved from the application and sent back over the network. The data first arrives at node-2 where it is verified, then cached in its Content Store. The PIT entry for that Interest is removed as it has been satisified and the data is relayed back to node-3. 

	This process is very similar to experiment 1a when there are no disconnections or interruptions between 2 nodes. The only exception is the additional relaying operation that is performed by node-2 in this case which does not appear to impact performance by a large amount when comparing response times.


Experiment (2b) Summary:
-----------------------
This scenario involves testing Interest retransmission by the receiving node (node-1). The link between node-2 and node-1 is down from the beginning of the experiment. This link is restored after the first Interest request expires. More than one Interest will be sent before the request is satisified.

Experiment parameters:
---------------------
- Number of nodes: 3
- Number of relay nodes: 1
- Number of links: 2
- Interest timeout period: 2 seconds
- Interval between Interest retries: 5 seconds
- File size: 512 bytes

Observations:
------------

Based on a number of 10 runs, the experiments show that 2 interests are required to successfully complete the request. The following information shows the total time for the requested data to be successfully received by node-3:
      Minimum=7026, Maximum=7105, Average=7036.9   (milliseconds)

In addition, the following measurements identify the response time for the (second) successful Interest request:
      Minimum=25, Maximum=104, Average=35.9    (milliseconds) 

The total time it takes for Interest to be fulfilled is much longer than experiment 2a. 


Analysis:
--------
This is similar to the scenario described in experiment 2b with the exception of the connection between node-2 (relay) and node-1 (sender) being unavailable at the start. The Interest sent from the application on node-3 (receiver) reaches node-2, but cannot be relayed to node-3 because the link is down. After the lifetime of the Interest expires, the PIT entries expire on both nodes and the Interest message is discarded. No Interest reach node-1 up to this point.
After the Interest retry interval (5 seconds) elapses, the application on node-3 resends the Interest which is then sent to node-2 and this time relayed to node-1. Node-1 identifies the URI in the request and replies with the requested data. The data is first cached in the Content Store on node-2, then once it arrives at node-3 is also cached and forwarded back to the application.  

The total time required to fulfill the request is noticeably longer than experiment 2a due to the need for the second Interest message to be sent. This involves the time required for the Interest message to expire, the application wait time, the time for the second Interest to be sent, and finally the time it takes the data to be relayed back. 

The time for the successful Interest to be fulfilled is similar to experiment 2a which is expected as after the first Interest message expires, the entire process must be repeated without knowledge of the prior attempt. 

Experiment (2c) Summary:
-----------------------
This scenario also involves testing Interest retransmission by the receiving node (node-1). However, in this case, the link between node-3 and node-2 is down immediately after the Interest request is sent from the node. The link between node-2 and node-1 is operational throughout the experiment. More than one Interest will be sent before the request is satisfied.


Experiment parameters:
---------------------
- Number of nodes: 3
- Number of relay nodes: 1
- Number of links: 2
- Interest timeout period: 2 seconds
- Interval between Interest retries: 5 seconds
- File size: 512 bytes

Observations:
------------

Based on a number of 5 runs, the results show that 2 Interests are required for the request to be satisified. The following measurements show the total time for the request data to be successfully received by node-3:
      Minimum=7006, Maximum=7008, Average=7007        (milliseconds)

In addition, the following times identify the response time for the (second) successful Interest request:
      Minimum=5, Maximum=7, Average=6.2       (milliseconds) 

The times for the successful (second) Interest to be fulfilled are noticeably lower than experiment 2a and 2b. In addition, while the total time required to fulfill the request is still higher than the one taken in experiment 2a, it is lower than experiment 2b. 

Analysis:
--------
This scenario is similar to experiment 2b, except that it forces Interest retransmission at a different point of time in the experiment. As opposed to node-1 (sender) not receiving the first Interest message in experiment 2b, the first Interest reaches node-1 through node-2. However, immediately after the Interest leaves node-3 (receiver), the connection between node-3 and node-2 is lost. 
Because the Interest reaches node-2, it is added to its PIT and based on the FIB forwarded to node-1. Node-1 will then send the data back to node-2, which attempts to send the data back to node-3 but cannot due to the link being down. The PIT entry expires on all 3 nodes, but the Content Object remains cached in the Content Store of both node-3 and node-2.

After the Interest retry interval (5 seconds) elapses, node-3 will send another Interest. When this message reaches node-2, the URI is looked up in the Content Store. Since the corresponding Content Object is still cached, a response is directly sent back to node-3. Node-1 plays no role in satisfying the second Interest message.
 
The total time to satisfy the request is slightly shorter than experiment 2b due to the fact that the second Interest request does not need to be sent all the way back to node-1. Additionally, the response time for the second successful Interest message is noticeably shorter as well confirming that data is being retrieved from the relay node's Content Store rather than being forwarded on the network.


Conclusion:
----------
Similar to the conclusion from Experiment 1, the application is responsible to ensure that Interests are retransmismitted as required to fulfill requests. The behavior of the relay node confirms that CCNx does not interfere with Interest retransmission. It also highlights the advantages of caching Content Objects in the local Content Store which would be an important feature in a Delay Tolerant environment. Additionally, the introduction of a relay node does not hugely impact performance when tested at similar connection speeds between the nodes. 
It is expected that in a network with more relay nodes, the performance would be similar since retransmitted Interests would be satisified by the closest node on the network. In a Delay Tolerant setting, it would be beneficial to have Interests retransmitted at shorter Intervals without explicit requests from the application. This would ensure that there is a larger window of opportunity around link outages for the data to be retrieved as well as a greater chance of requested data being cached on more nodes in the network resulting in faster overall retrieval times.


References:
---------
[1] http://www.ccnx.org/releases/latest/doc/technical/InterestMessage.html
* Apparently, this is not entirely true based on the implementation and http://www.ccnx.org/pipermail/ccnx-dev/2010-August/000249.html (even up till 0.6.0?)
[2] http://www.ccnx.org/releases/latest/doc/technical/CCNxProtocol.html