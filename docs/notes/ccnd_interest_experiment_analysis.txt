A number of simple experiments using 2 nodes were conducted in order to identify how CCNX reacts in an opportunistic setting particularly in regards to how Interest retransmission works. The experiments consist of a receiver node that requests a certain CCNX URI (ccnx:/test/1) and a sender node that stores data corresponding to that URI and responds to Interest requests. The scenarios presented below identify CCNX Interest retransmission behavior using different conditions of link connectivity.

Experiment (1a) Summary:
-----------------------
This scenario involves no link interruptions or disconnections. The receiver requests information from the sender and this data is immediately satisfied.

Experiment parameters:
---------------------
- Number of nodes: 2
- Number of relay nodes: 0
- Number of links: 1
- Interest timeout period: 2 seconds
- Interval between Interest retries: 5 seconds
- File size: 512 bytes

Observations:
------------

Based on a number of 10 runs, the experiments yields the expected end result of the data being received based on the first Interest request. The following information shows response times for the requested data being successfully received:
      Minimum=522, Maximum=609, Average=538.1 (milliseconds)

Analysis:
--------

The receiving node requests the CCN URI (ccnx:/test/1) at the application level which runs on top of the CCN daemon instance running on the same node. The application first sends an "interest_from" packet specifying the URI using the network face that is connected to the daemon. The Interest packet has a number of parameters, most notably its lifetime, which was set to 4 seconds for this experiment[1]*. When the CCN daemon receives the "interest_from" packet, the Interest packet is added to the Pending Interest Table (PIT). It then relays the request over the network as an "interest_to" packet. Once the Interest is sent, the CCN daemon will monitor that URI it for its specified lifetime.
On the other node, the sender, the CCN daemon receives the "interest_from" packet on its network face for a URI it may hold. The Forwarding Information Base on the node is searched for a match for that URI prefix. As one is found in the FIB, the daemon sends an "interest_to" packet to the application face. A secruity key request is performed to verify the indentify of the remote node. When validation is complete, a "consume" packet is then sent to the application which then responds with a "content_from" the same application face. 
   At this point, the file is cached as a Content Object in the Content Store of the sender node. A "consume" packet is sent over the network, followed by a "content_to" packet. That packet is received on the receiver node as a "content_from" by the daemon, which sends a "consume" to the application face. Finally, a "content_to" packet is sent which triggers the application to read the data from the local CCN daemon Content Store concluding the transfer. 

Experiment (1b) Summary:
-----------------------
This scenario tests Interest packet retransmission by the receiving node. This is done by simulating a loss of connectivity for a duration of 4 seconds when the experiment is first started. This loss results in the first Interest packet being sent from the receiving node to be lost. The node will then timeout and resend another Interest packet which is immediately fulfilled.

Experiment parameters:
---------------------
Same parameters as experiment 1a.

Observations:
------------
Based on a number of 10 runs, the experiments yields the expected end result of the data being received based on the second Interest request. The following information shows response times for the requested data being successfully received:
      Minimum=7020, Maximum=7055, Average=7026.3 (milliseconds)

These times are noticeably longer than the ones from experiment 1b and indicate the timeout period for the first Interest, the retry interval, and the successful Interest response time.

In addition, the following times identify the response time for the (second) successful Interest request:
   Minimum=19, Maximum=54, Average=25.2 (milliseconds)
These times are much lower than the time recorded in experiment 1a for an immediate (first) successful Interest.

Analysis:
--------

The receiving node requests the CCN URI (ccnx:/test/1) at the application level which runs on top of the CCN daemon instance running on the same node. The application first sends an "interest_from" packet for that URI to the daemon. The Interest packet is added to the Pending Interest Table (PIT) for the lifetime of the that Interest (4 seconds)*. The CCN daemon then issues an "interest_to" packet on the network and waits for a response. Because the connection between the two nodes is down at this point in time of the experiment, the Interest never reaches the sender node. After 4 seconds, an "interest_expiry" packet is sent back to the application and the Interest is removed from the PIT.
The application on the receiving node is designed to retry the requests 3 times with a retry interval in between attempts. After it timeouts from the first Interest request, it waits for the user specified retry interval and sends another request. This time the link between the two nodes is up and the Interest reaches the sender. 
The sender, the CCN daemon receives the "interest_from" packet from the network, and follows the same steps outlined in experiment 1a until the file is correctly received.

Experiment (1c) Summary:
-----------------------
This scenario again tests Interest packet retransmission by the receiving node. In this case, the Interest packet is received by the sender node, but the respose is lost due to connection loss. This loss results in the first Interest packet considered void and after its lifetime expires, a second Interest is sent which is then immediately fulfilled.

Experiment parameters:
---------------------
Same parameters as experiment 1a.

Observations:
------------
Based on a number of 3 runs, the experiments yields the expected end result of the data being received based on the second Interest request. The following information shows response times for the requested data being successfully received:
      Minimum=7005, Maximum=7007, Average=7006.33 (milliseconds)
These times are very close to the ones observed in experiment 1b due to the Interest lifetime expiry, retry delay, and second Interest request.  

In addition, the following times identify the response time for the (second) successful Interest request:
   Minimum=4, Maximum=6, Average=5.33333 (milliseconds) 
These times are much faster than the ones recorded in 1a and 1b because when the second Interest request is sent, the data is cached in the Content Store on the CCN daemon.

Analysis:
--------
In this scenario, the receiving node behaves the same way as it did in experiments 1a and 1b. A request is made for the CCN URI by the application which triggers an Interest request that is sent over the Network. In this case, the link between the two nodes is up when the Interest is received by the sender node, however, the link drops before a response is sent back. 
The sender node operates normally by searching for the requested URI locally, requesting the data from the local application, and sending "consume" and "content_to" packets back over the network. However, because the connection is lost by the time those 2 packets are sent back, the CCN daemon on the receiving node expires the Interest. The receiving application will then send another request after its retry interval elapses which corresponds to when the connection is re-established, allowing the Interest to be propagated successfully, and the data to be sent back without interruption or delay. It should be noted that in this second case, the file is cached locally on the CCN daemon and therefore there is no need to propagate the Interest request to the sender application. The prefix is matched directly to the Content Store and is sent back over the network without requiring intervention from the application.   


Experiment (1d) Summary:
-----------------------
This scenario tests Interest packet retransmission by simulating a link breakage while data is being received. This is conducted using a large file to simplify observing the results. The first Interest packet is prompty satisfied by the sender node, but data transmission fails requiring a second Interest to be sent for the data to be fully received.

Experiment parameters:
---------------------
Same parameters as experiment 1b except for:
- - File size: 40 MB

Observations:
------------
This results from this experiment was rather inconclusive, however they provide some insight into how retransmission works in this case. The main problem with this scenario stems from the application failing to recover when the network connection is lost while it is writing the large Content Object (file) to the network. This operation never recovers and the file is therefore never completely sent back to the receiving node resulting in a failure to receive the data despite multiple requests being subsequently issued.

Analysis:
--------
The scenario follows the same basic steps outlined in previous experiments. The main difference is that even though the first Interest packet is received by the sender application, the transmission of the datastream back is interrupted and never completed. As a result, the receiving application will retry the request procedure by sending another Interest which is satisfied directly from the Content Store on the sender node's CCN daemon. It appears that due to the large size of the file being transmitted, the data is not completely stored in the Content Store and the application hanging while writing the Content Object to the network does not allow the entire file to be transmitted. The CCN daemon on the receiving node appears to detect this incomplete data and ignores the "content_to" packets being received. The lifetime of the Interest elapses and expires. This process is repeated another time before the receiving application completes its retry attempts and exits.


Conclusion:
----------
Throughout the simple experiments conducted with a single link connecting 2 nodes, it can be concluded that the CCN daemon does not request Interest requests other than as instructed by the application driving the requests. When Interests are lost or not satisfied due to transmission errors, it is the responsibility of the application to send another Interest request until data is received. It is important to note that although the CCN daemon does not attempt to retransmit Interests itself, it does provide the capability of validating data being received by matching it to the Interest information as well as originating Content Object. 
In a Delay Tolerant environment, it will be the responsbility of the application to make sure that there is a continous stream of requests that attempt to recover from loss of connectivity.
 


References:
---------
[1] http://www.ccnx.org/releases/latest/doc/technical/InterestMessage.html
* Apparently, this is not entirely true based on the implementation and http://www.ccnx.org/pipermail/ccnx-dev/2010-August/000249.html (even up till 0.6.0?)
[2] http://www.ccnx.org/releases/latest/doc/technical/CCNxProtocol.html
